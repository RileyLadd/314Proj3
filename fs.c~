#include "fs.h"

void mapfs(int fd){
  if ((fs = mmap(NULL, FSSIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0)) == NULL){
      perror("mmap failed");
      exit(EXIT_FAILURE);
  }
}


void unmapfs(){
  munmap(fs, FSSIZE);
}

void formatfs(){
  // initialize structs
  //struct superblock sb = {NUMBLOCKS, NUM_INODES, NUMBLOCKS};
  //struct freeblockslist fbl = {NUMBLOCKS};
  
  // format superblock
  struct superblock* sb = fs;
  sb->freeBlockListSize = NUMBLOCKS;
  sb->numInodes = NUM_INODES;
  sb->numBlocks = NUMBLOCKS;

  // format freeblockslist
  struct freeblockslist* fbl = fs + sizeof(struct superblock);
  for (int i = 0; i < NUMBLOCKS; i++) {
    fbl->freeBlocks[i] = 0;
  }
  
  // format inodes
  struct inode *inodes = fs + sizeof(struct superblock) + sizeof(struct freeblockslist);
  for (int i = 0; i < NUM_INODES; i++) {
    inodes[i]->inuse = 0;
    inodes[i]->type = -1;
    inodes[i]->size = -1;
    for (int j = 0; j < 100      ; j++) {
      inodes[i]->blockRef[j] = -1;
    }
  }

  // blocks example
  /*
    struct block *blocks = fs + sizeof(struct superblock) + sizeof(struct freeblockslist) + sizeof(struct inode)*NUM_INODES;
    // block should have char[512] 
   */
  
  // following code probably won't work but idk

  /*
  // write superblock data to fs
  fs[0] = (char)sb.freeBlockListSize;
  fs[1] = (char)sb.numInodes;
  fs[2] = (char)sb.numBlocks;

  // write free blocks to fs
  for (int i = 4; i < NUMBLOCKS; i++) {
    fs[4] = '0';
  }
  */
  // write root to fs
  
  
}


void loadfs(){

  /* How to use fs for integers, as example
  int* intarray = fs;

  inarray[0] = 9099;
  intarray[100] = 934;
  */
}


void lsfs(){
  
}

void addfilefs(char* fname){

}


void removefilefs(char* fname){

}


void extractfilefs(char* fname){

}
